Data Binding / event Binding
----------------------------
event binding e data binding - photo-list.component.html
data binding - photos.component.ts - [title]="photo.description"

Resolvers
-------
app.routing.module.ts
PhotoListResolver

RxJs e Subject (Debounce pra melhorar a perfomance de filtros de texto)
--------------
photo-list.component.html
photo-list.component.ts

paginação
------------
PhotoListResolver

Load More button (esse jeito nao é tao botao pq aparece o botao mesmo se nao tem mais itens pra carregar)
--------------------
load-button.component.ts
photo-list.component.html
photo-list.component.ts

Load More button Scroll (soon)
--------------------

Remover padding (no-gutters)
-------------------------------
photos.component.ts

Card com ng-content pra mostrar um conteudo dentro de um componente
------------------
card.component.html - <ng-content></ng-content>

Output property - Comunicação entre compoennet pai e filho
-------------------------
card-component.ts
photo-list.component.ts

Diretivas
---------------
darken-on-hover.component.ts
photos.component.html
apDarkenOnHover brigthness='20%' - escrevendo errado ele nem da erro

SubModules
---------
declarations - um modulo deve declarar seus compoenetes para que outros modulos possam usa-lo (nao precisar ter selector)
exports - é só quando precisamos ter acesso NO TEMPLATE de outro componente fora desse modulo (tem selector)

Observables
-----------
AuthService - return this.http.post(API_URL + '/user/login', { userName, password } )
SignInComponent - this.authService
            .authenticate(userName, password)
            .subscribe( // nos isncrevemos no observable pra que ele seja disparado
                () => console.log('autenticado'),
                err => {
                    console.log(err);
                    this.loginForm.reset();
                }
            );

Navegação rotas
---------------------
SignInComponent - this.router.navigate(['user', userName])
primeiro param, rota, segundo param o que vem depois da rota
evitar o navigateByUrl pra nao ficar concatenando coisas

Verificar se a plataforma é bowser pra evitar problemas acessando nativeElements em server side rendering
-----------------------------------------------------
platform-detector.service.ts


Acesso do header de resposta
-----------------------------
https://cursos.alura.com.br/course/angular-autenticacao/task/40501
no cabecalho da requisicao http vem um x-access-token
é um cracha da pessoa logada
explicacao de PIPE !!!!! - quem realiza um subscribe de um observable já recebe transformações fitas com o pipe
explicacao de TAP !!!! - gravar valores, mostrar em console

BehaviourSubject vs Subject
-------------------------------
no Subject informamos quando ele vai disparar via .next()
no BehaviourSubject ja informamos um padrao que vai ser emitido logo na criacao dele
O behaviour é mais poderoso pq ele emite um valor mas esse valor continua sendo emitido para que
quem fizer subscribe mesmo que depois da emissao possa continuar escutando essa emissao

user.service.ts
header.component.ts


Async pipe
--------------------
https://cursos.alura.com.br/course/angular-autenticacao/task/40675


CustomValidators
-----------------
LowerCaseValidator


Async Custom CustomValidators
----------------------
user-not-taken-validator

Route Guard
------------
app.routing.module.ts
AuthGuard

RouterLink
------------
diretiva do RouterModule que usa o angular pra acessar rotas na aplicacao sem recarregar toda a pagina de novo
header.component.html
